# plot the distribution
hist(p_vals_nonprox)
p_vals_nonprox = numeric(N_perms)
uiuc_nonproximal2000_perm = uiuc_nonproximal_2000$Undergrad
for (i in 1:N_perms) {
# cells contain for UIUC the number of people from each state
# cells for US contain proportion of US population from each state
uiuc_nonproximal2000_perm = sample(uiuc_nonproximal2000_perm)
# run the chi-square test, store the p-value
p_vals_nonprox[i] = chisq.test(uiuc_nonproximal2000_perm, p = true_nonproximal_US_props)$statistic
}
# plot the distribution
hist(p_vals_nonprox)
p_vals_nonprox = numeric(N_perms)
uiuc_nonproximal2000_perm = uiuc_nonproximal_2000$Undergrad
for (i in 1:N_perms) {
# cells contain for UIUC the number of people from each state
# cells for US contain proportion of US population from each state
uiuc_nonproximal2000_perm = sample(uiuc_nonproximal2000_perm)
# run the chi-square test, store the p-value
p_vals_nonprox[i] = chisq.test(uiuc_nonproximal2000_perm, p = true_nonproximal_US_props)$p.val
}
# plot the distribution
hist(p_vals_nonprox)
proximal_states = c('Illinois', 'Indiana', 'Wisconsin', 'Iowa', 'Missouri', 'Kentucky')
exclude_proximal_states = -match(proximal_states, uiuc_statedata_2000$State)
uiuc_nonproximal_2000 = uiuc_statedata_2000[exclude_proximal_states, ]
us_nonproximal_2000 = popUS2000[exclude_proximal_states, ]
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# library(data.table)
state_data <- read.csv("uiuc_students_by_state.csv", header = TRUE)
popUS2000 <- read.csv("state_2000.csv", header = FALSE)
colnames(popUS2000) = c("State", "Pop")
# Sort the population data in alphabetical order to match the UIUC data
popUS2000 <- popUS2000[order(popUS2000$State), ]
uiuc_statedata_2000 <- state_data[state_data$Year == 2000, ]
# Exclude non-states that don't appear in our US population data
exclude_nonstate_attribs <- -match(c("Military", "Other US"), uiuc_statedata_2000$State)
uiuc_statedata_2000 <- uiuc_statedata_2000[exclude_nonstate_attribs, ]
popTotalUS2000 <- sum(popUS2000$Pop)
popUGUIUC2000 <- sum(uiuc_statedata_2000$Undergrad)
# combined_data
true_US_props = popUS2000$Pop / popTotalUS2000
p_val_orig = chisq.test(uiuc_statedata_2000$Undergrad, p = true_US_props)$p.value
p_val_orig
N_perms = 1000
# get p-value for chi-square test for each permutation
p_vals = numeric(N_perms)
uiuc_UGstatepop_perm = uiuc_statedata_2000$Undergrad
for (i in 1:N_perms) {
# cells contain for UIUC the number of people from each state
# cells for US contain proportion of US population from each state
uiuc_UGstatepop_perm = sample(uiuc_UGstatepop_perm)
# run the chi-square test, store the p-value
p_vals[i] = chisq.test(uiuc_UGstatepop_perm, p = true_US_props)$p.val
}
# plot the distribution
hist(p_vals)
# get the proportion of "permuted p-values" less than the original; this is the ASL
mean(p_vals >= p_val_orig)
proximal_states = c('Illinois', 'Indiana', 'Wisconsin', 'Iowa', 'Missouri', 'Kentucky')
exclude_proximal_states = -match(proximal_states, uiuc_statedata_2000$State)
uiuc_nonproximal_2000 = uiuc_statedata_2000[exclude_proximal_states, ]
us_nonproximal_2000 = popUS2000[exclude_proximal_states, ]
popNonproximalUS2000 = sum(us_nonproximal_2000$Pop)
popNonproximalUGUIUC2000 = sum(uiuc_nonproximal_2000$Undergrad)
true_nonproximal_US_props = us_nonproximal_2000$Pop / popNonproximalUS2000
chisq_stat_nonprox_orig = chisq.test(uiuc_nonproximal_2000$Undergrad,
p = true_nonproximal_US_props)$statistic
chisq_stat_nonprox_orig
chisq_stat_nonprox = numeric(N_perms)
uiuc_nonproximal2000_perm = uiuc_nonproximal_2000$Undergrad
for (i in 1:N_perms) {
# cells contain for UIUC the number of people from each state
# cells for US contain proportion of US population from each state
uiuc_nonproximal2000_perm = sample(uiuc_nonproximal2000_perm)
# run the chi-square test, store the p-value
chisq_stats_nonprox[i] = chisq.test(uiuc_nonproximal2000_perm, p = true_nonproximal_US_props)$statistic
}
chisq_stats_nonprox = numeric(N_perms)
uiuc_nonproximal2000_perm = uiuc_nonproximal_2000$Undergrad
for (i in 1:N_perms) {
# cells contain for UIUC the number of people from each state
# cells for US contain proportion of US population from each state
uiuc_nonproximal2000_perm = sample(uiuc_nonproximal2000_perm)
# run the chi-square test, store the p-value
chisq_stats_nonprox[i] = chisq.test(uiuc_nonproximal2000_perm, p = true_nonproximal_US_props)$statistic
}
# plot the distribution
hist(chisq_stats_nonprox)
mean(chisq_stats_nonprox >= chisq_stat_nonprox_orig)
chisq_stat_nonprox
chisq_stats_nonprox
chisq_stat_nonprox_orig
# plot the distribution
hist(chisq_stats_nonprox)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
state_data <- read.csv("uiuc_students_by_state.csv", header = TRUE)
popUS2000 <- read.csv("state_2000.csv", header = FALSE)
colnames(popUS2000) = c("State", "Pop")
# Sort the population data in alphabetical order to match the UIUC data
popUS2000 <- popUS2000[order(popUS2000$State), ]
uiuc_statedata_2000 <- state_data[state_data$Year == 2000, ]
# Exclude non-states that don't appear in our US population data
exclude_nonstate_attribs <- -match(c("Military", "Other US"), uiuc_statedata_2000$State)
uiuc_statedata_2000 <- uiuc_statedata_2000[exclude_nonstate_attribs, ]
popTotalUS2000 <- sum(popUS2000$Pop)
popUGUIUC2000 <- sum(uiuc_statedata_2000$Undergrad)
true_US_props = popUS2000$Pop / popTotalUS2000
# perform goodness-of-fit test on original data
p_val_orig = chisq.test(uiuc_statedata_2000$Undergrad, p = true_US_props)$p.value
p_val_orig
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
state_data <- read.csv("uiuc_students_by_state.csv", header = TRUE)
popUS2000 <- read.csv("state_2000.csv", header = FALSE)
colnames(popUS2000) = c("State", "Pop")
# Sort the population data in alphabetical order to match the UIUC data
popUS2000 <- popUS2000[order(popUS2000$State), ]
uiuc_statedata_2000 <- state_data[state_data$Year == 2000, ]
# Exclude non-states that don't appear in our US population data
exclude_nonstate_attribs <- -match(c("Military", "Other US"), uiuc_statedata_2000$State)
uiuc_statedata_2000 <- uiuc_statedata_2000[exclude_nonstate_attribs, ]
popTotalUS2000 <- sum(popUS2000$Pop)
popUGUIUC2000 <- sum(uiuc_statedata_2000$Undergrad)
true_US_props = popUS2000$Pop / popTotalUS2000
# perform goodness-of-fit test on original data
test_result_orig = chisq.test(uiuc_statedata_2000$Undergrad, p = true_US_props)
p_val_orig = test_result_orig$p.value
chisq_stat_orig = test_result_orig$statistic
print(chisq_stat_orig)
p_val_orig
N_perms = 1000
# get p-value for chi-square test for each permutation
p_vals = numeric(N_perms)
chisq_stat_vals = numeric(N_perms)
uiuc_UGstatepop_perm = uiuc_statedata_2000$Undergrad
for (i in 1:N_perms) {
# shuffle the population for each state
uiuc_UGstatepop_perm = sample(uiuc_UGstatepop_perm)
# run the chi-square test, store the p-value
test_results = chisq.test(uiuc_UGstatepop_perm, p = true_US_props)
p_vals[i] = test_results$p.value
chisq_stat_vals[i] = test_results$statistic
}
# plot the distribution
hist(p_vals)
# get the proportion of "permuted p-values" less than the original; this is the ASL
mean(p_vals >= p_val_orig)
hist(chisq_stat_vals)
proximal_states = c('Illinois', 'Indiana', 'Wisconsin', 'Iowa', 'Missouri', 'Kentucky')
exclude_proximal_states = -match(proximal_states, uiuc_statedata_2000$State)
uiuc_nonproximal_2000 = uiuc_statedata_2000[exclude_proximal_states, ]
us_nonproximal_2000 = popUS2000[exclude_proximal_states, ]
popNonproximalUS2000 = sum(us_nonproximal_2000$Pop)
popNonproximalUGUIUC2000 = sum(uiuc_nonproximal_2000$Undergrad)
true_nonproximal_US_props = us_nonproximal_2000$Pop / popNonproximalUS2000
test_result_nonprox_orig = chisq.test(uiuc_nonproximal_2000$Undergrad,
p = true_nonproximal_US_props)
chisq_stat_nonprox_orig = test_result_nonprox_orig$statistic
p_val_nonprox_orig = test_result_nonprox_orig$p.value
pring(chisq_stat_nonprox_orig)
chisq_stats_nonprox = numeric(N_perms)
uiuc_nonproximal2000_perm = uiuc_nonproximal_2000$Undergrad
for (i in 1:N_perms) {
# cells contain for UIUC the number of people from each state
# cells for US contain proportion of US population from each state
uiuc_nonproximal2000_perm = sample(uiuc_nonproximal2000_perm)
# run the chi-square test, store the p-value
chisq_stats_nonprox[i] = chisq.test(uiuc_nonproximal2000_perm, p = true_nonproximal_US_props)$statistic
}
# plot the distribution
hist(chisq_stats_nonprox)
mean(chisq_stats_nonprox >= chisq_stat_nonprox_orig)
chisq_stats_nonprox >= chisq_stat_nonprox_orig
chisq_stats_nonprox >= chisq_stat_nonprox_orig == FALSE
(chisq_stats_nonprox >= chisq_stat_nonprox_orig) == FALSE
mean(chisq_stats_nonprox <= chisq_stat_nonprox_orig)
mean(chisq_stats_nonprox >= chisq_stat_nonprox_orig)
sum(chisq_stats_nonprox >= chisq_stat_nonprox_orig)
asl_nonprox = ( 1 + sum(chisq_stats_nonprox >= chisq_stat_nonprox_orig) ) / (1 + N_perms)
asl_nonprox
# get the proportion of "permuted p-values" less than the original; this is the ASL
( 1 + sum(p_vals >= p_val_orig) ) / (1 + N_perms)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
state_data <- read.csv("uiuc_students_by_state.csv", header = TRUE)
popUS2000 <- read.csv("state_2000.csv", header = FALSE)
colnames(popUS2000) = c("State", "Pop")
# Sort the population data in alphabetical order to match the UIUC data
popUS2000 <- popUS2000[order(popUS2000$State), ]
uiuc_statedata_2000 <- state_data[state_data$Year == 2000, ]
# Exclude non-states that don't appear in our US population data
exclude_nonstate_attribs <- -match(c("Military", "Other US"), uiuc_statedata_2000$State)
uiuc_statedata_2000 <- uiuc_statedata_2000[exclude_nonstate_attribs, ]
popTotalUS2000 <- sum(popUS2000$Pop)
popUGUIUC2000 <- sum(uiuc_statedata_2000$Undergrad)
true_US_props = popUS2000$Pop / popTotalUS2000
# perform goodness-of-fit test on original data
test_result_orig = chisq.test(uiuc_statedata_2000$Undergrad, p = true_US_props)
p_val_orig = test_result_orig$p.value
chisq_stat_orig = test_result_orig$statistic
print(chisq_stat_orig)
p_val_orig
N_perms = 1000
# get p-value for chi-square test for each permutation
p_vals = numeric(N_perms)
chisq_stat_vals = numeric(N_perms)
uiuc_UGstatepop_perm = uiuc_statedata_2000$Undergrad
for (i in 1:N_perms) {
# shuffle the population for each state
uiuc_UGstatepop_perm = sample(uiuc_UGstatepop_perm)
# run the chi-square test, store the p-value
test_results = chisq.test(uiuc_UGstatepop_perm, p = true_US_props)
p_vals[i] = test_results$p.value
chisq_stat_vals[i] = test_results$statistic
}
# plot the distribution
hist(p_vals)
# get the proportion of "permuted p-values" less than the original; this is the ASL
( 1 + sum(p_vals >= p_val_orig) ) / (1 + N_perms)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
state_data <- read.csv("uiuc_students_by_state.csv", header = TRUE)
popUS2000 <- read.csv("state_2000.csv", header = FALSE)
colnames(popUS2000) = c("State", "Pop")
# Sort the population data in alphabetical order to match the UIUC data
popUS2000 <- popUS2000[order(popUS2000$State), ]
uiuc_statedata_2000 <- state_data[state_data$Year == 2000, ]
# Exclude non-states that don't appear in our US population data
exclude_nonstate_attribs <- -match(c("Military", "Other US"), uiuc_statedata_2000$State)
uiuc_statedata_2000 <- uiuc_statedata_2000[exclude_nonstate_attribs, ]
popTotalUS2000 <- sum(popUS2000$Pop)
popUGUIUC2000 <- sum(uiuc_statedata_2000$Undergrad)
true_US_props = popUS2000$Pop / popTotalUS2000
# perform goodness-of-fit test on original data
test_result_orig = chisq.test(uiuc_statedata_2000$Undergrad, p = true_US_props)
p_val_orig = test_result_orig$p.value
chisq_stat_orig = test_result_orig$statistic
print(chisq_stat_orig)
p_val_orig
N_perms = 1000
# get p-value for chi-square test for each permutation
p_vals = numeric(N_perms)
chisq_stat_vals = numeric(N_perms)
uiuc_UGstatepop_perm = uiuc_statedata_2000$Undergrad
for (i in 1:N_perms) {
# shuffle the population for each state
uiuc_UGstatepop_perm = sample(uiuc_UGstatepop_perm)
# run the chi-square test, store the p-value
test_results = chisq.test(uiuc_UGstatepop_perm, p = true_US_props)
p_vals[i] = test_results$p.value
chisq_stat_vals[i] = test_results$statistic
}
# plot the distribution
hist(p_vals)
# get the proportion of "permuted p-values" less than the original; this is the ASL
asl = ( 1 + sum(chisq_stat_vals >= chisq_stat_orig) ) / (1 + N_perms)
asl
# plot the distribution
hist(chisq_stat_vals)
chisq_stat_orig
hist(chisq_stat_vals)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
state_data <- read.csv("uiuc_students_by_state.csv", header = TRUE)
popUS2000 <- read.csv("state_2000.csv", header = FALSE)
colnames(popUS2000) = c("State", "Pop")
# Sort the population data in alphabetical order to match the UIUC data
popUS2000 <- popUS2000[order(popUS2000$State), ]
uiuc_statedata_2000 <- state_data[state_data$Year == 2000, ]
# Exclude non-states that don't appear in our US population data
exclude_nonstate_attribs <- -match(c("Military", "Other US"), uiuc_statedata_2000$State)
uiuc_statedata_2000 <- uiuc_statedata_2000[exclude_nonstate_attribs, ]
popTotalUS2000 <- sum(popUS2000$Pop)
popUGUIUC2000 <- sum(uiuc_statedata_2000$Undergrad)
true_US_props = popUS2000$Pop / popTotalUS2000
# perform goodness-of-fit test on original data
test_result_orig = chisq.test(uiuc_statedata_2000$Undergrad, p = true_US_props)
p_val_orig = test_result_orig$p.value
chisq_stat_orig = test_result_orig$statistic
print(chisq_stat_orig)
p_val_orig
N_perms = 1000
# get p-value for chi-square test for each permutation
p_vals = numeric(N_perms)
chisq_stat_vals = numeric(N_perms)
uiuc_UGstatepop_perm = uiuc_statedata_2000$Undergrad
for (i in 1:N_perms) {
# shuffle the population for each state
uiuc_UGstatepop_perm = sample(uiuc_UGstatepop_perm)
# run the chi-square test, store the p-value
test_results = chisq.test(uiuc_UGstatepop_perm, p = true_US_props)
p_vals[i] = test_results$p.value
chisq_stat_vals[i] = test_results$statistic
}
# plot the distribution
hist(p_vals)
hist(chisq_stat_vals)
# get the proportion of "permuted p-values" less than the original; this is the ASL
alpha = 0.01
asl = ( 1 + sum(chisq_stat_vals >= chisq_stat_orig) ) / (1 + N_perms)
print(asl)
asl < alpha
proximal_states = c('Illinois', 'Indiana', 'Wisconsin', 'Iowa', 'Missouri', 'Kentucky')
exclude_proximal_states = -match(proximal_states, uiuc_statedata_2000$State)
uiuc_nonproximal_2000 = uiuc_statedata_2000[exclude_proximal_states, ]
us_nonproximal_2000 = popUS2000[exclude_proximal_states, ]
popNonproximalUS2000 = sum(us_nonproximal_2000$Pop)
popNonproximalUGUIUC2000 = sum(uiuc_nonproximal_2000$Undergrad)
true_nonproximal_US_props = us_nonproximal_2000$Pop / popNonproximalUS2000
test_result_nonprox_orig = chisq.test(uiuc_nonproximal_2000$Undergrad,
p = true_nonproximal_US_props)
chisq_stat_nonprox_orig = test_result_nonprox_orig$statistic
p_val_nonprox_orig = test_result_nonprox_orig$p.value
print(chisq_stat_nonprox_orig)
p_val_nonprox_orig
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
state_data <- read.csv("uiuc_students_by_state.csv", header = TRUE)
popUS2000 <- read.csv("state_2000.csv", header = FALSE)
colnames(popUS2000) = c("State", "Pop")
# Sort the population data in alphabetical order to match the UIUC data
popUS2000 <- popUS2000[order(popUS2000$State), ]
uiuc_statedata_2000 <- state_data[state_data$Year == 2000, ]
# Exclude non-states that don't appear in our US population data
exclude_nonstate_attribs <- -match(c("Military", "Other US"), uiuc_statedata_2000$State)
uiuc_statedata_2000 <- uiuc_statedata_2000[exclude_nonstate_attribs, ]
popTotalUS2000 <- sum(popUS2000$Pop)
popUGUIUC2000 <- sum(uiuc_statedata_2000$Undergrad)
true_US_props = popUS2000$Pop / popTotalUS2000
# perform goodness-of-fit test on original data
test_result_orig = chisq.test(uiuc_statedata_2000$Undergrad, p = true_US_props)
p_val_orig = test_result_orig$p.value
chisq_stat_orig = test_result_orig$statistic
print(chisq_stat_orig)
p_val_orig
N_perms = 1000
# get p-value for chi-square test for each permutation
p_vals = numeric(N_perms)
chisq_stat_vals = numeric(N_perms)
uiuc_UGstatepop_perm = uiuc_statedata_2000$Undergrad
for (i in 1:N_perms) {
# shuffle the population for each state
uiuc_UGstatepop_perm = sample(uiuc_UGstatepop_perm)
# run the chi-square test, store the p-value
test_results = chisq.test(uiuc_UGstatepop_perm, p = true_US_props)
p_vals[i] = test_results$p.value
chisq_stat_vals[i] = test_results$statistic
}
# plot the distribution
hist(p_vals)
hist(chisq_stat_vals)
# get the proportion of "permuted p-values" less than the original; this is the ASL
alpha = 0.01
asl = ( 1 + sum(chisq_stat_vals >= chisq_stat_orig) ) / (1 + N_perms)
print(asl)
asl < alpha
proximal_states = c('Illinois', 'Indiana', 'Wisconsin', 'Iowa', 'Missouri', 'Kentucky')
exclude_proximal_states = -match(proximal_states, uiuc_statedata_2000$State)
uiuc_nonproximal_2000 = uiuc_statedata_2000[exclude_proximal_states, ]
us_nonproximal_2000 = popUS2000[exclude_proximal_states, ]
popNonproximalUS2000 = sum(us_nonproximal_2000$Pop)
popNonproximalUGUIUC2000 = sum(uiuc_nonproximal_2000$Undergrad)
true_nonproximal_US_props = us_nonproximal_2000$Pop / popNonproximalUS2000
test_result_nonprox_orig = chisq.test(uiuc_nonproximal_2000$Undergrad,
p = true_nonproximal_US_props)
chisq_stat_nonprox_orig = test_result_nonprox_orig$statistic
p_val_nonprox_orig = test_result_nonprox_orig$p.value
print(chisq_stat_nonprox_orig)
p_val_nonprox_orig
chisq_stats_nonprox = numeric(N_perms)
uiuc_nonproximal2000_perm = uiuc_nonproximal_2000$Undergrad
for (i in 1:N_perms) {
# cells contain for UIUC the number of people from each state
# cells for US contain proportion of US population from each state
uiuc_nonproximal2000_perm = sample(uiuc_nonproximal2000_perm)
# run the chi-square test, store the p-value
chisq_stats_nonprox[i] = chisq.test(uiuc_nonproximal2000_perm, p = true_nonproximal_US_props)$statistic
}
# plot the distribution
hist(chisq_stats_nonprox)
asl_nonprox = ( 1 + sum(chisq_stats_nonprox >= chisq_stat_nonprox_orig) ) / (1 + N_perms)
print(asl_nonprox)
asl_nonprox < alpha
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
state_data <- read.csv("uiuc_students_by_state.csv", header = TRUE)
popUS2000 <- read.csv("state_2000.csv", header = FALSE)
colnames(popUS2000) = c("State", "Pop")
# Sort the population data in alphabetical order to match the UIUC data
popUS2000 <- popUS2000[order(popUS2000$State), ]
uiuc_statedata_2000 <- state_data[state_data$Year == 2000, ]
# Exclude non-states that don't appear in our US population data
exclude_nonstate_attribs <- -match(c("Military", "Other US"), uiuc_statedata_2000$State)
uiuc_statedata_2000 <- uiuc_statedata_2000[exclude_nonstate_attribs, ]
popTotalUS2000 <- sum(popUS2000$Pop)
popUGUIUC2000 <- sum(uiuc_statedata_2000$Undergrad)
true_US_props = popUS2000$Pop / popTotalUS2000
# perform goodness-of-fit test on original data
test_result_orig = chisq.test(uiuc_statedata_2000$Undergrad, p = true_US_props)
p_val_orig = test_result_orig$p.value
chisq_stat_orig = test_result_orig$statistic
print(chisq_stat_orig)
p_val_orig
# perform goodness-of-fit test on original data
test_result_orig = chisq.test(uiuc_statedata_2000$Undergrad, p = true_US_props)
test_result_orig
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
state_data <- read.csv("uiuc_students_by_state.csv", header = TRUE)
popUS2000 <- read.csv("state_2000.csv", header = FALSE)
colnames(popUS2000) = c("State", "Pop")
# Sort the population data in alphabetical order to match the UIUC data
popUS2000 <- popUS2000[order(popUS2000$State), ]
uiuc_statedata_2000 <- state_data[state_data$Year == 2000, ]
# Exclude non-states that don't appear in our US population data
exclude_nonstate_attribs <- -match(c("Military", "Other US"), uiuc_statedata_2000$State)
uiuc_statedata_2000 <- uiuc_statedata_2000[exclude_nonstate_attribs, ]
popTotalUS2000 <- sum(popUS2000$Pop)
popUGUIUC2000 <- sum(uiuc_statedata_2000$Undergrad)
true_US_props = popUS2000$Pop / popTotalUS2000
# perform goodness-of-fit test on original data
test_result_orig = chisq.test(uiuc_statedata_2000$Undergrad, p = true_US_props)
p_val_orig = test_result_orig$p.value
chisq_stat_orig = test_result_orig$statistic
print(chisq_stat_orig)
p_val_orig
N_perms = 1000
# get p-value for chi-square test for each permutation
p_vals = numeric(N_perms)
chisq_stat_vals = numeric(N_perms)
uiuc_UGstatepop_perm = uiuc_statedata_2000$Undergrad
for (i in 1:N_perms) {
# shuffle the population for each state
uiuc_UGstatepop_perm = sample(uiuc_UGstatepop_perm)
# run the chi-square test, store the p-value
test_results = chisq.test(uiuc_UGstatepop_perm, p = true_US_props)
p_vals[i] = test_results$p.value
chisq_stat_vals[i] = test_results$statistic
}
# plot the distribution
hist(p_vals)
hist(chisq_stat_vals)
# get the proportion of "permuted statistics" greater than the original; this is the ASL
alpha = 0.01
asl = ( 1 + sum(chisq_stat_vals >= chisq_stat_orig) ) / (1 + N_perms)
print(asl)
asl < alpha
proximal_states = c('Illinois', 'Indiana', 'Wisconsin', 'Iowa', 'Missouri', 'Kentucky')
exclude_proximal_states = -match(proximal_states, uiuc_statedata_2000$State)
uiuc_nonproximal_2000 = uiuc_statedata_2000[exclude_proximal_states, ]
us_nonproximal_2000 = popUS2000[exclude_proximal_states, ]
popNonproximalUS2000 = sum(us_nonproximal_2000$Pop)
popNonproximalUGUIUC2000 = sum(uiuc_nonproximal_2000$Undergrad)
true_nonproximal_US_props = us_nonproximal_2000$Pop / popNonproximalUS2000
test_result_nonprox_orig = chisq.test(uiuc_nonproximal_2000$Undergrad,
p = true_nonproximal_US_props)
chisq_stat_nonprox_orig = test_result_nonprox_orig$statistic
p_val_nonprox_orig = test_result_nonprox_orig$p.value
print(chisq_stat_nonprox_orig)
p_val_nonprox_orig
test_result_nonprox_orig
state_data <- read.csv("uiuc_students_by_state.csv", header = TRUE)
popUS2000 <- read.csv("state_2000.csv", header = FALSE)
View(state_data)
rm(list=ls())
state_data <- read.csv("uiuc_students_by_state.csv", header = TRUE)
popUS2000 <- read.csv("state_2000.csv", header = FALSE)
View(popUS2000)
?new_site
?blogdown::new_site
blogdown::new_site(theme = "nodejh/hugo-theme-cactus-plus")
library(blogdown)
serve_site()
blogdown::serve_site()
?serve_site
setwd("~/website")
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
install.packages("httpuv")
install.packages("httpuv")
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown::hugo_version()
blogdown::serve_site()
?blogdown::serve_site
blogdown::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
traceback()
blogdown::build_site()
blogdown:::serve_site()
file.remove(list.files(, '[.]Rmd$', recursive = TRUE, full.names = TRUE))
blogdown:::serve_site()
install.packages("later")
install.packages("later")
install.packages("httpuv")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
sessionInfo()
install.packages(servr)
install.packages("servr")
install.packages("servr")
blogdown:::serve_site()
